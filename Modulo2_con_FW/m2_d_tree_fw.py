# -*- coding: utf-8 -*-
"""M2_d_tree_FW.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X1Hpuv5llX6TzEou8VtCqsp47ZTtvoy-

# Momento de Retroalimentación: Módulo 2 Uso de framework o biblioteca de aprendizaje máquina para la implementación de una solución. (Portafolio Implementación)

### Importar librerias
Se importan las bibliotecas necesarias como numpy, pandas y algunas funciones específicas de scikit-learn.
"""

# Importación de las bibliotecas necesarias
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.metrics import confusion_matrix, classification_report

"""### Leer los datos

Pide al usuario la ubicación del archivo CSV a cargar y luego lo lee utilizando la biblioteca pandas.
"""

# Carga del dataset
filename = input('''Ingresa la ruta donde se encuentra el archivo + /filename.csv
                 => ''')
df = pd.read_csv(filename, skiprows=1, header=None)

# Extracción de características y etiquetas
X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values

# División del dataset en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Lista para almacenar métricas
accuracies = []

# Entrenar el árbol incrementando su profundidad para ver cómo aprende
for depth in range(1, 11):  # profundidad máxima del modelo de
    # Inicializa y entrena el modelo
    clf = DecisionTreeClassifier(max_depth=depth)
    clf.fit(X_train, y_train)

    # Realiza predicciones y calcula la precisión
    y_pred = clf.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    accuracies.append(acc)

    # Imprimir métricas
    print(f"Profundidad: {depth}")
    print(f"Accuracy: {acc:.2f}")
    print(f"Precision: {precision_score(y_test, y_pred, average='weighted'):.2f}")
    print(f"Recall: {recall_score(y_test, y_pred, average='weighted'):.2f}")
    print(f"F1 Score: {f1_score(y_test, y_pred, average='weighted'):.2f}")

    # Matriz de confusión y reporte de clasificación
    print("Matriz de Confusión:")
    print(confusion_matrix(y_test, y_pred))
    print("\nReporte de Clasificación:")
    print(classification_report(y_test, y_pred))
    print("----------")

# Gráfica de precisión en función de la profundidad del modelo
plt.plot(range(1, 11), accuracies)
plt.title('Accuracy en función de la profundidad del árbol')
plt.xlabel('Profundidad')
plt.ylabel('Accuracy')
plt.xticks(range(1, 11))
plt.show()

"""### Visualización
Muestra una gráfica de precisión (accuracy) en función de la profundidad del árbol para visualizar cómo va aprendiendo el modelo.
"""

# Listas para almacenar métricas
train_errors, val_errors = [], []

# Evaluar la precisión a medida que aumenta el tamaño del conjunto de entrenamiento
for m in range(1, len(X_train)):
    clf = DecisionTreeClassifier(max_depth=10)
    clf.fit(X_train[:m], y_train[:m])

    y_train_predict = clf.predict(X_train[:m])
    y_val_predict = clf.predict(X_test)

    train_errors.append(accuracy_score(y_train[:m], y_train_predict))
    val_errors.append(accuracy_score(y_test, y_val_predict))

# Gráficar la curva de aprendizaje
plt.plot(np.sqrt(train_errors), "r-+", linewidth=2, label="train")
plt.plot(np.sqrt(val_errors), "b-", linewidth=3, label="val")
plt.title('Curva de Aprendizaje')
plt.xlabel('Tamaño del conjunto de entrenamiento')
plt.ylabel('Accuracy')
plt.legend()
plt.show()